plugins {
    id "fabric-loom"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = "net.immortaldevs.azazels-mods"
version = rootProject.mod_version

repositories {
    maven {
        name "Jitpack"
        url "https://jitpack.io"
    }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com" }
    maven {
        name = "Ladysnake Mods"
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        url = uri("https://storage.googleapis.com/devan-maven/")
    }
    maven { url 'https://maven.wispforest.io/' } // owo lib
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Dependencies
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "com.github.devs-immortal:Incubus-Core:${project.incubus_version}"
    modImplementation "io.wispforest:owo-lib:${project.owo_version}+1.19"
    modImplementation include("com.github.devs-immortal:Divine-Intervention:${project.divine_intervention_version}")

    // For use in dev
    modImplementation "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
    modApi("com.terraformersmc:modmenu:${project.modmenu_version}")

    // Datagen
    modImplementation("net.devtech:arrp:0.+")

    // Umbreon
    annotationProcessor "com.github.devs-immortal:Divine-Intervention:${project.divine_intervention_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

sourceSets {
    main {
        resources {
            srcDirs += ["src/main/generated"]
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(project.java_version)
    }

    withSourcesJar()
}

loom {
    shareRemapCaches = true

    runs {
        datagen {
            server()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.strict-validation"
            vmArg "-Dfabric-api.datagen.modid=${archivesBaseName.replace('-' as char, '_' as char)}"

            runDir "build/datagen"
        }
    }
}

//     publishing {
//         publications {
//             mavenJava(MavenPublication) {
//             from components.java
//             }
//         }
//     }
